// <auto-generated />
using System;
using Dcontact.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dcontact.Data.Migrations
{
    [DbContext(typeof(Web_ProjectContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Dcontact.Data.TbAvatar", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("PictureLocation")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("pictureLocation");

                    b.HasKey("Id");

                    b.ToTable("tbAvatar", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbBackGround", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("PictureLocation")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("pictureLocation");

                    b.HasKey("Id");

                    b.ToTable("tbBackGround", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbDcontact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_User");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdUser" }, "IX_tbDcontact_ID_User");

                    b.ToTable("tbDcontact", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbOrderInformation", b =>
                {
                    b.Property<string>("TradingCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("address");

                    b.Property<decimal>("ExportPrice")
                        .HasColumnType("money")
                        .HasColumnName("exportPrice");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_user");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone");

                    b.Property<string>("PitureLocation")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("pitureLocation");

                    b.HasKey("TradingCode");

                    b.HasIndex("IdUser");

                    b.ToTable("tbOrderInformation", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbReport", b =>
                {
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("IdRow")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_row");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_user");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasIndex(new[] { "IdRow" }, "IX_tbReport_ID_row");

                    b.HasIndex(new[] { "IdUser" }, "IX_tbReport_ID_user");

                    b.ToTable("tbReport", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbRowContent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("date")
                        .HasColumnName("birth");

                    b.Property<int>("Click")
                        .HasColumnType("int")
                        .HasColumnName("click");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("IdRowDesign")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_RowDesign");

                    b.Property<string>("Link")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdRowDesign" }, "IX_tbRowContent_ID_RowDesign");

                    b.ToTable("tbRowContent", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbRowDesign", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("Bullet")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("bullet");

                    b.Property<string>("Font")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("font");

                    b.Property<string>("IdTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_Template");

                    b.Property<string>("RowColor")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("rowColor");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdTemplate" }, "IX_tbRowDesign_ID_Template");

                    b.ToTable("tbRowDesign", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("IdAvatar")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_Avatar");

                    b.Property<string>("IdBackGround")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_BackGround");

                    b.Property<string>("IdDcontact")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_Dcontact");

                    b.Property<bool>("IsApply")
                        .HasColumnType("bit")
                        .HasColumnName("isApply");

                    b.HasKey("Id");

                    b.HasIndex("IdAvatar");

                    b.HasIndex("IdBackGround");

                    b.HasIndex("IdDcontact");

                    b.ToTable("tbTemplate", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.UserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dcontact.Data.TbDcontact", b =>
                {
                    b.HasOne("Dcontact.Data.UserIdentity", "IdUserIdentityNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_tbDcontact_tbUser");

                    b.Navigation("IdUserIdentityNavigation");
                });

            modelBuilder.Entity("Dcontact.Data.TbOrderInformation", b =>
                {
                    b.HasOne("Dcontact.Data.UserIdentity", "IdUserIdentityNavigation")
                        .WithMany("TbOrderInformations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_tbOrderInformation_AspNetUsers");

                    b.Navigation("IdUserIdentityNavigation");
                });

            modelBuilder.Entity("Dcontact.Data.TbReport", b =>
                {
                    b.HasOne("Dcontact.Data.TbRowContent", "IdRowNavigation")
                        .WithMany()
                        .HasForeignKey("IdRow")
                        .IsRequired()
                        .HasConstraintName("FK_tbReport_tbRowContent");

                    b.HasOne("Dcontact.Data.UserIdentity", "IdUserIdentityNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_tbReport_AspNetUsers");

                    b.Navigation("IdRowNavigation");

                    b.Navigation("IdUserIdentityNavigation");
                });

            modelBuilder.Entity("Dcontact.Data.TbRowContent", b =>
                {
                    b.HasOne("Dcontact.Data.TbRowDesign", "IdRowDesignNavigation")
                        .WithMany("TbRowContents")
                        .HasForeignKey("IdRowDesign")
                        .IsRequired()
                        .HasConstraintName("FK_tbRowContent_tbRowDesign");

                    b.Navigation("IdRowDesignNavigation");
                });

            modelBuilder.Entity("Dcontact.Data.TbRowDesign", b =>
                {
                    b.HasOne("Dcontact.Data.TbTemplate", "IdTemplateNavigation")
                        .WithMany("TbRowDesigns")
                        .HasForeignKey("IdTemplate")
                        .IsRequired()
                        .HasConstraintName("FK_tbRowDesign_tbTemplate1");

                    b.Navigation("IdTemplateNavigation");
                });

            modelBuilder.Entity("Dcontact.Data.TbTemplate", b =>
                {
                    b.HasOne("Dcontact.Data.TbAvatar", "IdAvatarNavigation")
                        .WithMany("TbTemplates")
                        .HasForeignKey("IdAvatar")
                        .IsRequired()
                        .HasConstraintName("FK_tbTemplate_tbAvatar");

                    b.HasOne("Dcontact.Data.TbBackGround", "IdBackGroundNavigation")
                        .WithMany("TbTemplates")
                        .HasForeignKey("IdBackGround")
                        .IsRequired()
                        .HasConstraintName("FK_tbTemplate_tbBackGround");

                    b.HasOne("Dcontact.Data.TbDcontact", "IdDcontactNavigation")
                        .WithMany("TbTemplates")
                        .HasForeignKey("IdDcontact")
                        .IsRequired()
                        .HasConstraintName("FK_tbTemplate_tbDcontact");

                    b.Navigation("IdAvatarNavigation");

                    b.Navigation("IdBackGroundNavigation");

                    b.Navigation("IdDcontactNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dcontact.Data.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dcontact.Data.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dcontact.Data.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dcontact.Data.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dcontact.Data.TbAvatar", b =>
                {
                    b.Navigation("TbTemplates");
                });

            modelBuilder.Entity("Dcontact.Data.TbBackGround", b =>
                {
                    b.Navigation("TbTemplates");
                });

            modelBuilder.Entity("Dcontact.Data.TbDcontact", b =>
                {
                    b.Navigation("TbTemplates");
                });

            modelBuilder.Entity("Dcontact.Data.TbRowDesign", b =>
                {
                    b.Navigation("TbRowContents");
                });

            modelBuilder.Entity("Dcontact.Data.TbTemplate", b =>
                {
                    b.Navigation("TbRowDesigns");
                });

            modelBuilder.Entity("Dcontact.Data.UserIdentity", b =>
                {
                    b.Navigation("TbOrderInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
